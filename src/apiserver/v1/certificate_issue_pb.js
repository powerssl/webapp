// source: powerssl/apiserver/v1/certificate_issue.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.object.extend(proto, google_protobuf_field_mask_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.powerssl.apiserver.v1.CertificateIssue', null, global);
goog.exportSymbol('proto.powerssl.apiserver.v1.CreateCertificateIssueRequest', null, global);
goog.exportSymbol('proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest', null, global);
goog.exportSymbol('proto.powerssl.apiserver.v1.GetCertificateIssueRequest', null, global);
goog.exportSymbol('proto.powerssl.apiserver.v1.ListCertificateIssuesRequest', null, global);
goog.exportSymbol('proto.powerssl.apiserver.v1.ListCertificateIssuesResponse', null, global);
goog.exportSymbol('proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.CertificateIssue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.apiserver.v1.CertificateIssue.repeatedFields_, null);
};
goog.inherits(proto.powerssl.apiserver.v1.CertificateIssue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.CertificateIssue.displayName = 'proto.powerssl.apiserver.v1.CertificateIssue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.apiserver.v1.CreateCertificateIssueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.displayName = 'proto.powerssl.apiserver.v1.CreateCertificateIssueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest.displayName = 'proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.GetCertificateIssueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.apiserver.v1.GetCertificateIssueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.GetCertificateIssueRequest.displayName = 'proto.powerssl.apiserver.v1.GetCertificateIssueRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.apiserver.v1.ListCertificateIssuesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.displayName = 'proto.powerssl.apiserver.v1.ListCertificateIssuesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.repeatedFields_, null);
};
goog.inherits(proto.powerssl.apiserver.v1.ListCertificateIssuesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.displayName = 'proto.powerssl.apiserver.v1.ListCertificateIssuesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.displayName = 'proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.apiserver.v1.CertificateIssue.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.CertificateIssue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.CertificateIssue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.CertificateIssue.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createTime: (f = msg.getCreateTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updateTime: (f = msg.getUpdateTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    displayName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    title: jspb.Message.getFieldWithDefault(msg, 5, ""),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    dnsnamesList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    keyAlgorithm: jspb.Message.getFieldWithDefault(msg, 9, ""),
    keySize: jspb.Message.getFieldWithDefault(msg, 10, 0),
    digestAlgorithm: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue}
 */
proto.powerssl.apiserver.v1.CertificateIssue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.CertificateIssue;
  return proto.powerssl.apiserver.v1.CertificateIssue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.CertificateIssue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue}
 */
proto.powerssl.apiserver.v1.CertificateIssue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreateTime(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdateTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addDnsnames(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyAlgorithm(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeySize(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDigestAlgorithm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.CertificateIssue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.CertificateIssue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.CertificateIssue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreateTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdateTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDnsnamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getKeyAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getKeySize();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getDigestAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp create_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.getCreateTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
*/
proto.powerssl.apiserver.v1.CertificateIssue.prototype.setCreateTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.clearCreateTime = function() {
  return this.setCreateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.hasCreateTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp update_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.getUpdateTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
*/
proto.powerssl.apiserver.v1.CertificateIssue.prototype.setUpdateTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.clearUpdateTime = function() {
  return this.setUpdateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.hasUpdateTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string display_name = 4;
 * @return {string}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string title = 5;
 * @return {string}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * map<string, string> labels = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
  return this;};


/**
 * repeated string dnsnames = 8;
 * @return {!Array<string>}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.getDnsnamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.setDnsnamesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.addDnsnames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.clearDnsnamesList = function() {
  return this.setDnsnamesList([]);
};


/**
 * optional string key_algorithm = 9;
 * @return {string}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.getKeyAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.setKeyAlgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 key_size = 10;
 * @return {number}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.getKeySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.setKeySize = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string digest_algorithm = 11;
 * @return {string}
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.getDigestAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue} returns this
 */
proto.powerssl.apiserver.v1.CertificateIssue.prototype.setDigestAlgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.CreateCertificateIssueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    parent: jspb.Message.getFieldWithDefault(msg, 1, ""),
    certificateIssue: (f = msg.getCertificateIssue()) && proto.powerssl.apiserver.v1.CertificateIssue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.CreateCertificateIssueRequest}
 */
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.CreateCertificateIssueRequest;
  return proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.CreateCertificateIssueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.CreateCertificateIssueRequest}
 */
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParent(value);
      break;
    case 2:
      var value = new proto.powerssl.apiserver.v1.CertificateIssue;
      reader.readMessage(value,proto.powerssl.apiserver.v1.CertificateIssue.deserializeBinaryFromReader);
      msg.setCertificateIssue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.CreateCertificateIssueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCertificateIssue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.powerssl.apiserver.v1.CertificateIssue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string parent = 1;
 * @return {string}
 */
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.prototype.getParent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.CreateCertificateIssueRequest} returns this
 */
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.prototype.setParent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CertificateIssue certificate_issue = 2;
 * @return {?proto.powerssl.apiserver.v1.CertificateIssue}
 */
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.prototype.getCertificateIssue = function() {
  return /** @type{?proto.powerssl.apiserver.v1.CertificateIssue} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.apiserver.v1.CertificateIssue, 2));
};


/**
 * @param {?proto.powerssl.apiserver.v1.CertificateIssue|undefined} value
 * @return {!proto.powerssl.apiserver.v1.CreateCertificateIssueRequest} returns this
*/
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.prototype.setCertificateIssue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powerssl.apiserver.v1.CreateCertificateIssueRequest} returns this
 */
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.prototype.clearCertificateIssue = function() {
  return this.setCertificateIssue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powerssl.apiserver.v1.CreateCertificateIssueRequest.prototype.hasCertificateIssue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest}
 */
proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest;
  return proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest}
 */
proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest} returns this
 */
proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.GetCertificateIssueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.GetCertificateIssueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.GetCertificateIssueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.GetCertificateIssueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.GetCertificateIssueRequest}
 */
proto.powerssl.apiserver.v1.GetCertificateIssueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.GetCertificateIssueRequest;
  return proto.powerssl.apiserver.v1.GetCertificateIssueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.GetCertificateIssueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.GetCertificateIssueRequest}
 */
proto.powerssl.apiserver.v1.GetCertificateIssueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.GetCertificateIssueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.GetCertificateIssueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.GetCertificateIssueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.GetCertificateIssueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.apiserver.v1.GetCertificateIssueRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.GetCertificateIssueRequest} returns this
 */
proto.powerssl.apiserver.v1.GetCertificateIssueRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.ListCertificateIssuesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    parent: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pageSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.ListCertificateIssuesRequest}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.ListCertificateIssuesRequest;
  return proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.ListCertificateIssuesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.ListCertificateIssuesRequest}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParent(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.ListCertificateIssuesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string parent = 1;
 * @return {string}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.prototype.getParent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.ListCertificateIssuesRequest} returns this
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.prototype.setParent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 page_size = 2;
 * @return {number}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.powerssl.apiserver.v1.ListCertificateIssuesRequest} returns this
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string page_token = 3;
 * @return {string}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.ListCertificateIssuesRequest} returns this
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesRequest.prototype.setPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.ListCertificateIssuesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificateIssuesList: jspb.Message.toObjectList(msg.getCertificateIssuesList(),
    proto.powerssl.apiserver.v1.CertificateIssue.toObject, includeInstance),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.ListCertificateIssuesResponse}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.ListCertificateIssuesResponse;
  return proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.ListCertificateIssuesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.ListCertificateIssuesResponse}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powerssl.apiserver.v1.CertificateIssue;
      reader.readMessage(value,proto.powerssl.apiserver.v1.CertificateIssue.deserializeBinaryFromReader);
      msg.addCertificateIssues(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.ListCertificateIssuesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificateIssuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.powerssl.apiserver.v1.CertificateIssue.serializeBinaryToWriter
    );
  }
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated CertificateIssue certificate_issues = 1;
 * @return {!Array<!proto.powerssl.apiserver.v1.CertificateIssue>}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.prototype.getCertificateIssuesList = function() {
  return /** @type{!Array<!proto.powerssl.apiserver.v1.CertificateIssue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powerssl.apiserver.v1.CertificateIssue, 1));
};


/**
 * @param {!Array<!proto.powerssl.apiserver.v1.CertificateIssue>} value
 * @return {!proto.powerssl.apiserver.v1.ListCertificateIssuesResponse} returns this
*/
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.prototype.setCertificateIssuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.powerssl.apiserver.v1.CertificateIssue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powerssl.apiserver.v1.CertificateIssue}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.prototype.addCertificateIssues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.powerssl.apiserver.v1.CertificateIssue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powerssl.apiserver.v1.ListCertificateIssuesResponse} returns this
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.prototype.clearCertificateIssuesList = function() {
  return this.setCertificateIssuesList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.ListCertificateIssuesResponse} returns this
 */
proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.prototype.setNextPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    updateMask: (f = msg.getUpdateMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f),
    certificateIssue: (f = msg.getCertificateIssue()) && proto.powerssl.apiserver.v1.CertificateIssue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest}
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest;
  return proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest}
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setUpdateMask(value);
      break;
    case 3:
      var value = new proto.powerssl.apiserver.v1.CertificateIssue;
      reader.readMessage(value,proto.powerssl.apiserver.v1.CertificateIssue.deserializeBinaryFromReader);
      msg.setCertificateIssue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUpdateMask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getCertificateIssue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.powerssl.apiserver.v1.CertificateIssue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest} returns this
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.FieldMask update_mask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.prototype.getUpdateMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest} returns this
*/
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.prototype.setUpdateMask = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest} returns this
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.prototype.clearUpdateMask = function() {
  return this.setUpdateMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.prototype.hasUpdateMask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CertificateIssue certificate_issue = 3;
 * @return {?proto.powerssl.apiserver.v1.CertificateIssue}
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.prototype.getCertificateIssue = function() {
  return /** @type{?proto.powerssl.apiserver.v1.CertificateIssue} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.apiserver.v1.CertificateIssue, 3));
};


/**
 * @param {?proto.powerssl.apiserver.v1.CertificateIssue|undefined} value
 * @return {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest} returns this
*/
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.prototype.setCertificateIssue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest} returns this
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.prototype.clearCertificateIssue = function() {
  return this.setCertificateIssue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest.prototype.hasCertificateIssue = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.powerssl.apiserver.v1);
