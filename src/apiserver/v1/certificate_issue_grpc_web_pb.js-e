/**
 * @fileoverview gRPC-Web generated client stub for powerssl.apiserver.v1
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_api_annotations_pb = require('../../../google/api/annotations_pb.js')

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')

var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js')

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = {};
proto.powerssl = {};
proto.powerssl.apiserver = {};
proto.powerssl.apiserver.v1 = require('./certificate_issue_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?Object} options
 * @constructor
 * @struct
 * @final
 */
proto.powerssl.apiserver.v1.CertificateIssueServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options['format'] = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?Object} options
 * @constructor
 * @struct
 * @final
 */
proto.powerssl.apiserver.v1.CertificateIssueServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options['format'] = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.powerssl.apiserver.v1.CreateCertificateIssueRequest,
 *   !proto.powerssl.apiserver.v1.CertificateIssue>}
 */
const methodDescriptor_CertificateIssueService_Create = new grpc.web.MethodDescriptor(
  '/powerssl.apiserver.v1.CertificateIssueService/Create',
  grpc.web.MethodType.UNARY,
  proto.powerssl.apiserver.v1.CreateCertificateIssueRequest,
  proto.powerssl.apiserver.v1.CertificateIssue,
  /**
   * @param {!proto.powerssl.apiserver.v1.CreateCertificateIssueRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.powerssl.apiserver.v1.CertificateIssue.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.powerssl.apiserver.v1.CreateCertificateIssueRequest,
 *   !proto.powerssl.apiserver.v1.CertificateIssue>}
 */
const methodInfo_CertificateIssueService_Create = new grpc.web.AbstractClientBase.MethodInfo(
  proto.powerssl.apiserver.v1.CertificateIssue,
  /**
   * @param {!proto.powerssl.apiserver.v1.CreateCertificateIssueRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.powerssl.apiserver.v1.CertificateIssue.deserializeBinary
);


/**
 * @param {!proto.powerssl.apiserver.v1.CreateCertificateIssueRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.powerssl.apiserver.v1.CertificateIssue)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.powerssl.apiserver.v1.CertificateIssue>|undefined}
 *     The XHR Node Readable Stream
 */
proto.powerssl.apiserver.v1.CertificateIssueServiceClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/powerssl.apiserver.v1.CertificateIssueService/Create',
      request,
      metadata || {},
      methodDescriptor_CertificateIssueService_Create,
      callback);
};


/**
 * @param {!proto.powerssl.apiserver.v1.CreateCertificateIssueRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.powerssl.apiserver.v1.CertificateIssue>}
 *     Promise that resolves to the response
 */
proto.powerssl.apiserver.v1.CertificateIssueServicePromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/powerssl.apiserver.v1.CertificateIssueService/Create',
      request,
      metadata || {},
      methodDescriptor_CertificateIssueService_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_CertificateIssueService_Delete = new grpc.web.MethodDescriptor(
  '/powerssl.apiserver.v1.CertificateIssueService/Delete',
  grpc.web.MethodType.UNARY,
  proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodInfo_CertificateIssueService_Delete = new grpc.web.AbstractClientBase.MethodInfo(
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.powerssl.apiserver.v1.CertificateIssueServiceClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/powerssl.apiserver.v1.CertificateIssueService/Delete',
      request,
      metadata || {},
      methodDescriptor_CertificateIssueService_Delete,
      callback);
};


/**
 * @param {!proto.powerssl.apiserver.v1.DeleteCertificateIssueRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.powerssl.apiserver.v1.CertificateIssueServicePromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/powerssl.apiserver.v1.CertificateIssueService/Delete',
      request,
      metadata || {},
      methodDescriptor_CertificateIssueService_Delete);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.powerssl.apiserver.v1.GetCertificateIssueRequest,
 *   !proto.powerssl.apiserver.v1.CertificateIssue>}
 */
const methodDescriptor_CertificateIssueService_Get = new grpc.web.MethodDescriptor(
  '/powerssl.apiserver.v1.CertificateIssueService/Get',
  grpc.web.MethodType.UNARY,
  proto.powerssl.apiserver.v1.GetCertificateIssueRequest,
  proto.powerssl.apiserver.v1.CertificateIssue,
  /**
   * @param {!proto.powerssl.apiserver.v1.GetCertificateIssueRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.powerssl.apiserver.v1.CertificateIssue.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.powerssl.apiserver.v1.GetCertificateIssueRequest,
 *   !proto.powerssl.apiserver.v1.CertificateIssue>}
 */
const methodInfo_CertificateIssueService_Get = new grpc.web.AbstractClientBase.MethodInfo(
  proto.powerssl.apiserver.v1.CertificateIssue,
  /**
   * @param {!proto.powerssl.apiserver.v1.GetCertificateIssueRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.powerssl.apiserver.v1.CertificateIssue.deserializeBinary
);


/**
 * @param {!proto.powerssl.apiserver.v1.GetCertificateIssueRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.powerssl.apiserver.v1.CertificateIssue)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.powerssl.apiserver.v1.CertificateIssue>|undefined}
 *     The XHR Node Readable Stream
 */
proto.powerssl.apiserver.v1.CertificateIssueServiceClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/powerssl.apiserver.v1.CertificateIssueService/Get',
      request,
      metadata || {},
      methodDescriptor_CertificateIssueService_Get,
      callback);
};


/**
 * @param {!proto.powerssl.apiserver.v1.GetCertificateIssueRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.powerssl.apiserver.v1.CertificateIssue>}
 *     Promise that resolves to the response
 */
proto.powerssl.apiserver.v1.CertificateIssueServicePromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/powerssl.apiserver.v1.CertificateIssueService/Get',
      request,
      metadata || {},
      methodDescriptor_CertificateIssueService_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.powerssl.apiserver.v1.ListCertificateIssuesRequest,
 *   !proto.powerssl.apiserver.v1.ListCertificateIssuesResponse>}
 */
const methodDescriptor_CertificateIssueService_List = new grpc.web.MethodDescriptor(
  '/powerssl.apiserver.v1.CertificateIssueService/List',
  grpc.web.MethodType.UNARY,
  proto.powerssl.apiserver.v1.ListCertificateIssuesRequest,
  proto.powerssl.apiserver.v1.ListCertificateIssuesResponse,
  /**
   * @param {!proto.powerssl.apiserver.v1.ListCertificateIssuesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.powerssl.apiserver.v1.ListCertificateIssuesRequest,
 *   !proto.powerssl.apiserver.v1.ListCertificateIssuesResponse>}
 */
const methodInfo_CertificateIssueService_List = new grpc.web.AbstractClientBase.MethodInfo(
  proto.powerssl.apiserver.v1.ListCertificateIssuesResponse,
  /**
   * @param {!proto.powerssl.apiserver.v1.ListCertificateIssuesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.powerssl.apiserver.v1.ListCertificateIssuesResponse.deserializeBinary
);


/**
 * @param {!proto.powerssl.apiserver.v1.ListCertificateIssuesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.powerssl.apiserver.v1.ListCertificateIssuesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.powerssl.apiserver.v1.ListCertificateIssuesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.powerssl.apiserver.v1.CertificateIssueServiceClient.prototype.list =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/powerssl.apiserver.v1.CertificateIssueService/List',
      request,
      metadata || {},
      methodDescriptor_CertificateIssueService_List,
      callback);
};


/**
 * @param {!proto.powerssl.apiserver.v1.ListCertificateIssuesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.powerssl.apiserver.v1.ListCertificateIssuesResponse>}
 *     Promise that resolves to the response
 */
proto.powerssl.apiserver.v1.CertificateIssueServicePromiseClient.prototype.list =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/powerssl.apiserver.v1.CertificateIssueService/List',
      request,
      metadata || {},
      methodDescriptor_CertificateIssueService_List);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest,
 *   !proto.powerssl.apiserver.v1.CertificateIssue>}
 */
const methodDescriptor_CertificateIssueService_Update = new grpc.web.MethodDescriptor(
  '/powerssl.apiserver.v1.CertificateIssueService/Update',
  grpc.web.MethodType.UNARY,
  proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest,
  proto.powerssl.apiserver.v1.CertificateIssue,
  /**
   * @param {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.powerssl.apiserver.v1.CertificateIssue.deserializeBinary
);


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest,
 *   !proto.powerssl.apiserver.v1.CertificateIssue>}
 */
const methodInfo_CertificateIssueService_Update = new grpc.web.AbstractClientBase.MethodInfo(
  proto.powerssl.apiserver.v1.CertificateIssue,
  /**
   * @param {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.powerssl.apiserver.v1.CertificateIssue.deserializeBinary
);


/**
 * @param {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.powerssl.apiserver.v1.CertificateIssue)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.powerssl.apiserver.v1.CertificateIssue>|undefined}
 *     The XHR Node Readable Stream
 */
proto.powerssl.apiserver.v1.CertificateIssueServiceClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/powerssl.apiserver.v1.CertificateIssueService/Update',
      request,
      metadata || {},
      methodDescriptor_CertificateIssueService_Update,
      callback);
};


/**
 * @param {!proto.powerssl.apiserver.v1.UpdateCertificateIssueRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.powerssl.apiserver.v1.CertificateIssue>}
 *     Promise that resolves to the response
 */
proto.powerssl.apiserver.v1.CertificateIssueServicePromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/powerssl.apiserver.v1.CertificateIssueService/Update',
      request,
      metadata || {},
      methodDescriptor_CertificateIssueService_Update);
};


module.exports = proto.powerssl.apiserver.v1;

