// source: powerssl/apiserver/v1/acme_server.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.object.extend(proto, google_protobuf_field_mask_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.powerssl.apiserver.v1.ACMEServer', null, global);
goog.exportSymbol('proto.powerssl.apiserver.v1.CreateACMEServerRequest', null, global);
goog.exportSymbol('proto.powerssl.apiserver.v1.DeleteACMEServerRequest', null, global);
goog.exportSymbol('proto.powerssl.apiserver.v1.GetACMEServerRequest', null, global);
goog.exportSymbol('proto.powerssl.apiserver.v1.ListACMEServersRequest', null, global);
goog.exportSymbol('proto.powerssl.apiserver.v1.ListACMEServersResponse', null, global);
goog.exportSymbol('proto.powerssl.apiserver.v1.UpdateACMEServerRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.ACMEServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.apiserver.v1.ACMEServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.ACMEServer.displayName = 'proto.powerssl.apiserver.v1.ACMEServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.CreateACMEServerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.apiserver.v1.CreateACMEServerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.CreateACMEServerRequest.displayName = 'proto.powerssl.apiserver.v1.CreateACMEServerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.DeleteACMEServerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.apiserver.v1.DeleteACMEServerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.DeleteACMEServerRequest.displayName = 'proto.powerssl.apiserver.v1.DeleteACMEServerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.GetACMEServerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.apiserver.v1.GetACMEServerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.GetACMEServerRequest.displayName = 'proto.powerssl.apiserver.v1.GetACMEServerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.apiserver.v1.ListACMEServersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.ListACMEServersRequest.displayName = 'proto.powerssl.apiserver.v1.ListACMEServersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.apiserver.v1.ListACMEServersResponse.repeatedFields_, null);
};
goog.inherits(proto.powerssl.apiserver.v1.ListACMEServersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.ListACMEServersResponse.displayName = 'proto.powerssl.apiserver.v1.ListACMEServersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.apiserver.v1.UpdateACMEServerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powerssl.apiserver.v1.UpdateACMEServerRequest.displayName = 'proto.powerssl.apiserver.v1.UpdateACMEServerRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.ACMEServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.ACMEServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.ACMEServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createTime: (f = msg.getCreateTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updateTime: (f = msg.getUpdateTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    displayName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    title: jspb.Message.getFieldWithDefault(msg, 5, ""),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    directoryUrl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    integrationName: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.ACMEServer}
 */
proto.powerssl.apiserver.v1.ACMEServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.ACMEServer;
  return proto.powerssl.apiserver.v1.ACMEServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.ACMEServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.ACMEServer}
 */
proto.powerssl.apiserver.v1.ACMEServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreateTime(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdateTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirectoryUrl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntegrationName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.ACMEServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.ACMEServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.ACMEServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreateTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdateTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDirectoryUrl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getIntegrationName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.ACMEServer} returns this
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp create_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.getCreateTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.powerssl.apiserver.v1.ACMEServer} returns this
*/
proto.powerssl.apiserver.v1.ACMEServer.prototype.setCreateTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powerssl.apiserver.v1.ACMEServer} returns this
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.clearCreateTime = function() {
  return this.setCreateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.hasCreateTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp update_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.getUpdateTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.powerssl.apiserver.v1.ACMEServer} returns this
*/
proto.powerssl.apiserver.v1.ACMEServer.prototype.setUpdateTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powerssl.apiserver.v1.ACMEServer} returns this
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.clearUpdateTime = function() {
  return this.setUpdateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.hasUpdateTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string display_name = 4;
 * @return {string}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.ACMEServer} returns this
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string title = 5;
 * @return {string}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.ACMEServer} returns this
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.ACMEServer} returns this
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * map<string, string> labels = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.powerssl.apiserver.v1.ACMEServer} returns this
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
  return this;};


/**
 * optional string directory_url = 8;
 * @return {string}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.getDirectoryUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.ACMEServer} returns this
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.setDirectoryUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string integration_name = 9;
 * @return {string}
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.getIntegrationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.ACMEServer} returns this
 */
proto.powerssl.apiserver.v1.ACMEServer.prototype.setIntegrationName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.CreateACMEServerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.CreateACMEServerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.CreateACMEServerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.CreateACMEServerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    acmeServer: (f = msg.getAcmeServer()) && proto.powerssl.apiserver.v1.ACMEServer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.CreateACMEServerRequest}
 */
proto.powerssl.apiserver.v1.CreateACMEServerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.CreateACMEServerRequest;
  return proto.powerssl.apiserver.v1.CreateACMEServerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.CreateACMEServerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.CreateACMEServerRequest}
 */
proto.powerssl.apiserver.v1.CreateACMEServerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powerssl.apiserver.v1.ACMEServer;
      reader.readMessage(value,proto.powerssl.apiserver.v1.ACMEServer.deserializeBinaryFromReader);
      msg.setAcmeServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.CreateACMEServerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.CreateACMEServerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.CreateACMEServerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.CreateACMEServerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAcmeServer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.powerssl.apiserver.v1.ACMEServer.serializeBinaryToWriter
    );
  }
};


/**
 * optional ACMEServer acme_server = 1;
 * @return {?proto.powerssl.apiserver.v1.ACMEServer}
 */
proto.powerssl.apiserver.v1.CreateACMEServerRequest.prototype.getAcmeServer = function() {
  return /** @type{?proto.powerssl.apiserver.v1.ACMEServer} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.apiserver.v1.ACMEServer, 1));
};


/**
 * @param {?proto.powerssl.apiserver.v1.ACMEServer|undefined} value
 * @return {!proto.powerssl.apiserver.v1.CreateACMEServerRequest} returns this
*/
proto.powerssl.apiserver.v1.CreateACMEServerRequest.prototype.setAcmeServer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powerssl.apiserver.v1.CreateACMEServerRequest} returns this
 */
proto.powerssl.apiserver.v1.CreateACMEServerRequest.prototype.clearAcmeServer = function() {
  return this.setAcmeServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powerssl.apiserver.v1.CreateACMEServerRequest.prototype.hasAcmeServer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.DeleteACMEServerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.DeleteACMEServerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.DeleteACMEServerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.DeleteACMEServerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.DeleteACMEServerRequest}
 */
proto.powerssl.apiserver.v1.DeleteACMEServerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.DeleteACMEServerRequest;
  return proto.powerssl.apiserver.v1.DeleteACMEServerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.DeleteACMEServerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.DeleteACMEServerRequest}
 */
proto.powerssl.apiserver.v1.DeleteACMEServerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.DeleteACMEServerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.DeleteACMEServerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.DeleteACMEServerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.DeleteACMEServerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.apiserver.v1.DeleteACMEServerRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.DeleteACMEServerRequest} returns this
 */
proto.powerssl.apiserver.v1.DeleteACMEServerRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.GetACMEServerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.GetACMEServerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.GetACMEServerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.GetACMEServerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.GetACMEServerRequest}
 */
proto.powerssl.apiserver.v1.GetACMEServerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.GetACMEServerRequest;
  return proto.powerssl.apiserver.v1.GetACMEServerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.GetACMEServerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.GetACMEServerRequest}
 */
proto.powerssl.apiserver.v1.GetACMEServerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.GetACMEServerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.GetACMEServerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.GetACMEServerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.GetACMEServerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.apiserver.v1.GetACMEServerRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.GetACMEServerRequest} returns this
 */
proto.powerssl.apiserver.v1.GetACMEServerRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.ListACMEServersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.ListACMEServersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pageToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pageSize: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.ListACMEServersRequest}
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.ListACMEServersRequest;
  return proto.powerssl.apiserver.v1.ListACMEServersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.ListACMEServersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.ListACMEServersRequest}
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.ListACMEServersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.ListACMEServersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.ListACMEServersRequest} returns this
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string page_token = 2;
 * @return {string}
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.ListACMEServersRequest} returns this
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest.prototype.setPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 page_size = 3;
 * @return {number}
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.powerssl.apiserver.v1.ListACMEServersRequest} returns this
 */
proto.powerssl.apiserver.v1.ListACMEServersRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.ListACMEServersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.ListACMEServersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    acmeServersList: jspb.Message.toObjectList(msg.getAcmeServersList(),
    proto.powerssl.apiserver.v1.ACMEServer.toObject, includeInstance),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.ListACMEServersResponse}
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.ListACMEServersResponse;
  return proto.powerssl.apiserver.v1.ListACMEServersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.ListACMEServersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.ListACMEServersResponse}
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powerssl.apiserver.v1.ACMEServer;
      reader.readMessage(value,proto.powerssl.apiserver.v1.ACMEServer.deserializeBinaryFromReader);
      msg.addAcmeServers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.ListACMEServersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.ListACMEServersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAcmeServersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.powerssl.apiserver.v1.ACMEServer.serializeBinaryToWriter
    );
  }
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated ACMEServer acme_servers = 1;
 * @return {!Array<!proto.powerssl.apiserver.v1.ACMEServer>}
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse.prototype.getAcmeServersList = function() {
  return /** @type{!Array<!proto.powerssl.apiserver.v1.ACMEServer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powerssl.apiserver.v1.ACMEServer, 1));
};


/**
 * @param {!Array<!proto.powerssl.apiserver.v1.ACMEServer>} value
 * @return {!proto.powerssl.apiserver.v1.ListACMEServersResponse} returns this
*/
proto.powerssl.apiserver.v1.ListACMEServersResponse.prototype.setAcmeServersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.powerssl.apiserver.v1.ACMEServer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powerssl.apiserver.v1.ACMEServer}
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse.prototype.addAcmeServers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.powerssl.apiserver.v1.ACMEServer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powerssl.apiserver.v1.ListACMEServersResponse} returns this
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse.prototype.clearAcmeServersList = function() {
  return this.setAcmeServersList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.ListACMEServersResponse} returns this
 */
proto.powerssl.apiserver.v1.ListACMEServersResponse.prototype.setNextPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.apiserver.v1.UpdateACMEServerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.apiserver.v1.UpdateACMEServerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    updateMask: (f = msg.getUpdateMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f),
    acmeServer: (f = msg.getAcmeServer()) && proto.powerssl.apiserver.v1.ACMEServer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.apiserver.v1.UpdateACMEServerRequest}
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.apiserver.v1.UpdateACMEServerRequest;
  return proto.powerssl.apiserver.v1.UpdateACMEServerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.apiserver.v1.UpdateACMEServerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.apiserver.v1.UpdateACMEServerRequest}
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setUpdateMask(value);
      break;
    case 3:
      var value = new proto.powerssl.apiserver.v1.ACMEServer;
      reader.readMessage(value,proto.powerssl.apiserver.v1.ACMEServer.deserializeBinaryFromReader);
      msg.setAcmeServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.apiserver.v1.UpdateACMEServerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.apiserver.v1.UpdateACMEServerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUpdateMask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getAcmeServer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.powerssl.apiserver.v1.ACMEServer.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powerssl.apiserver.v1.UpdateACMEServerRequest} returns this
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.FieldMask update_mask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.prototype.getUpdateMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.powerssl.apiserver.v1.UpdateACMEServerRequest} returns this
*/
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.prototype.setUpdateMask = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powerssl.apiserver.v1.UpdateACMEServerRequest} returns this
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.prototype.clearUpdateMask = function() {
  return this.setUpdateMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.prototype.hasUpdateMask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ACMEServer acme_server = 3;
 * @return {?proto.powerssl.apiserver.v1.ACMEServer}
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.prototype.getAcmeServer = function() {
  return /** @type{?proto.powerssl.apiserver.v1.ACMEServer} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.apiserver.v1.ACMEServer, 3));
};


/**
 * @param {?proto.powerssl.apiserver.v1.ACMEServer|undefined} value
 * @return {!proto.powerssl.apiserver.v1.UpdateACMEServerRequest} returns this
*/
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.prototype.setAcmeServer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powerssl.apiserver.v1.UpdateACMEServerRequest} returns this
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.prototype.clearAcmeServer = function() {
  return this.setAcmeServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powerssl.apiserver.v1.UpdateACMEServerRequest.prototype.hasAcmeServer = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.powerssl.apiserver.v1);
